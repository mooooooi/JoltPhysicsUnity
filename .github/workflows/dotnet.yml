# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with: 
          submodules: true
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Install libclang
      run: sudo apt-get update && sudo apt-get install -y libclang-15-dev
      
    - name: Restore Cache Zig Cache
      uses: actions/cache/restore@v4
      with:
        path: Jolt.Native~/zig-cache
        key: ${{ runner.os }}-zig-cache
        
    - name: Restore dependencies
      run: |
        dotnet restore
        dotnet tool restore
      working-directory: Jolt.Native~

    - name: Set LD_LIBRARY_PATH for libclangsharp
      run: |
        # 查找 libclangsharp.so 文件的完整路径
        LIB_PATH=$(dpkg -L libclang-15-dev | grep 'libclangsharp.so')
        # 获取该文件所在的目录
        LIB_DIR=$(dirname "$LIB_PATH")
        # 将该目录添加到 LD_LIBRARY_PATH，并输出到 GITHUB_ENV 文件中
        # 这样，后续的所有 step 都能使用这个环境变量
        echo "LD_LIBRARY_PATH=$LIB_DIR" >> $GITHUB_ENV
        echo "Found libclangsharp.so directory: $LIB_DIR"
      
    - name: Build
      # run: dotnet build --no-restore
      run: dotnet ClangSharpPInvokeGenerator --include-directory "/home/runner/.nuget/packages/vezel.zig.toolsets.linux-x64/0.11.0.1/tools/lib/include" -f lib/joltc/joltc.h -n Jolt -m UnsafeBindings -l joltc -o ../Jolt/Bindings/UnsafeBindings.g.cs "@clangsharp.rsp"
      working-directory: Jolt.Native~


    - name: Save Cache Zig Cache
      uses: actions/cache/save@v4
      continue-on-error: true
      with:
        path: Jolt.Native~/zig-cache
        key: ${{ runner.os }}-zig-cache
